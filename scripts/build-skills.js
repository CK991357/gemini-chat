import fs from 'fs';
import { globSync } from 'glob';
import matter from 'gray-matter';
import path from 'path';

// Êõ¥ÂÅ•Â£ÆÁöÑË∑ØÂæÑÂ§ÑÁêÜ
const skillsDir = path.resolve(process.cwd(), 'src', 'skills');
const outputDir = path.resolve(process.cwd(), 'src', 'tool-spec-system');
const outputFile = path.join(outputDir, 'generated-skills.js');

// Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

console.log('üöÄ Starting skills build process...');
console.log(`üîç Scanning for skills in: ${skillsDir}`);

try {
  // Êü•ÊâæÊâÄÊúâ SKILL.md Êñá‰ª∂
  const skillFiles = globSync(`${skillsDir}/**/SKILL.md`);
  
  if (skillFiles.length === 0) {
    console.warn('‚ö†Ô∏è No skill files found. Creating empty registry.');
    // ÂàõÂª∫Á©∫ÁöÑÊ≥®ÂÜåË°®ËÄå‰∏çÊòØÈÄÄÂá∫
  }

  console.log(`‚úÖ Found ${skillFiles.length} skill files.`);

  const skillsData = {};

  // ËØªÂèñÂíåËß£ÊûêÊØè‰∏™ÊäÄËÉΩÊñá‰ª∂
  skillFiles.forEach(file => {
    try {
      const markdownContent = fs.readFileSync(file, 'utf8');
      const { data: metadata, content } = matter(markdownContent);

      if (!metadata.tool_name) {
        console.warn(`  ‚ö†Ô∏è Skipping ${file}: Missing 'tool_name' in frontmatter.`);
        return;
      }
      
      // Ëá™Âä®Â°´ÂÖÖÁº∫Â§±ÁöÑÂøÖÈúÄÂ≠óÊÆµ
      metadata.name = metadata.name || metadata.tool_name;
      metadata.description = metadata.description || 'ÊöÇÊó†ÊèèËø∞';
      metadata.category = metadata.category || 'general';
      metadata.tags = metadata.tags || [];

      skillsData[metadata.tool_name] = {
        metadata,
        content: content.trim(),
        filePath: path.relative(process.cwd(), file)
      };
      
      console.log(`  ‚úÖ Processed: ${metadata.name} (${metadata.tool_name})`);
    } catch (error) {
      console.error(`  ‚ùå Failed to process ${file}:`, error.message);
    }
  });

  // ÁîüÊàêÊñá‰ª∂ÂÜÖÂÆπ - ‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑÂ∫èÂàóÂåñ
  const fileContent = `/**
 * @file Ëá™Âä®ÁîüÊàêÁöÑÊäÄËÉΩÊ≥®ÂÜåË°® - Áî± build-skills.js ËÑöÊú¨ÁîüÊàê
 * !!! ËØ∑ÂãøÁõ¥Êé•ÁºñËæëÊ≠§Êñá‰ª∂ !!!
 * ËØ∑Âú® /src/skills/ ÁõÆÂΩï‰∏≠ÁºñËæë .md Êñá‰ª∂
 * 
 * ÁîüÊàêÊó∂Èó¥: ${new Date().toISOString()}
 * ÊäÄËÉΩÊï∞Èáè: ${Object.keys(skillsData).length}
 */

export const SKILLS_DATA = ${JSON.stringify(skillsData, null, 2)};

// ËæÖÂä©ÂáΩÊï∞ÔºöÂ∞ÜÂØπË±°ËΩ¨Êç¢‰∏∫ Map
export function getSkillsRegistry() {
  const map = new Map();
  Object.entries(SKILLS_DATA).forEach(([key, value]) => {
    map.set(key, value);
  });
  return map;
}
`;

  // ÂÜôÂÖ•Êñá‰ª∂
  fs.writeFileSync(outputFile, fileContent, 'utf8');
  
  const skillCount = Object.keys(skillsData).length;
  console.log(`\nüéâ Successfully generated skills registry!`);
  console.log(`üì¶ ${skillCount} skills bundled into: ${outputFile}`);
  
  // ËæìÂá∫ÊäÄËÉΩÂàóË°®
  if (skillCount > 0) {
    console.log(`\nüìã Available skills:`);
    Object.values(skillsData).forEach(skill => {
      console.log(`   - ${skill.metadata.name} (${skill.metadata.tool_name})`);
    });
  }
  
} catch (error) {
  console.error('‚ùå Build process failed:', error);
  process.exit(1);
}